/****************************************************************************************/
    Notas:
        - Surge.sh: sobe sites estaticos
        - BEM CSS: metodologia de CSS
        - Standard.JS: boas praticas adotadas por grandes empresas.
        - Anjana Vakil: Learning Functional Programming - JSConf    
        - Non-React Libraries in a React Setup & Rethinking Native App Development
        - https://hackernoon.com/top-10-react-libraries-on-github-ebf730e7ac25
        - https://facebook.github.io/immutable-js/
        - Tadeu Zagallo
        - Elm
        - https://tableless.com.br/bem-vindo-ao-redux/
        - https://imasters.com.br/desenvolvimento/software/os-estados-do-flux-uma-nova-arquitetura/

/****************************************************************************************/

- codigo acoplado: codigo que chama muitas funções ao mesmo tempo.

- index.js: entry point da aplicação;

- id="root": todo o codigo react da pagina vai para dentro da div root.

- O React não manipula o DOM da pagina, ele interage com o Virtual DOM. Ele não altera diretamente a pagina, faz as alterações em memoria e renderiza na pagina. Ou seja, ele pega tudo o que tem no DOM e no Virtual DOM, faz uma comparação e adiciona a diferença.

- Componentes react: 

- BEM CSS: estudar a metodologia. Olhar o post do Mario no Alura.

- Componente React deve ter:
 -> Import do React
 -> Estilo
 -> Criar classe e exportar
 -> render com return()

- O babel precisa do react importado para transformar o JSX.

- O React precisa de um elemento para envolver as tags dos Componentes ( <Fragments></Fragments>) ao inves de mil divs.

- super(): sync do this com as propriedades que estão vindo do Componente.

- Evento Sintético: se fosse no HTML seria o onclick naquele elemento, no sintético ele insere na pag. da forma mais performatica possivel (delegate).

- ... : joga tudo o que tinha no array antigo no array novo

- forEach: diferente do map() o forEach nunca tem um return

- react-router-dom: BrowserRouter, Switch, Route. Modulos para roteamento de url

- Class Fields: para fazer Bind.

- Não fazer manipulação diretamente no DOM, usar Refs ( quando não tem dependencias ex: contagem de char)

- Life Cycle do Componente

- Má pratica usar o construtor para fazer funcionalidades, no maximo a definição de atributos ou configurações. Usar o componentDidMount() por exemplo.

- handler: metodo 

- JS Curto Circuito: MDN operação logica. Testar usando a função Boolean() para fazer validação.

- Conceito: estado + Componente

- Tretas:
    - One Way Data Flow: O fluxo vai de cima para baixo.
        ex: BrowserRouter, Switch, Route, Home -> ordem hierarquica 

- PropTypes: tipar o JS, required etc

- map, reduce, filter, find

- Treta JS: Bubbly - Ex: um click dentro de um tweet, vai reverberando para os outros elementos pai até chegar no window, que estivessem ouvindo clicks tbm.

- Closest vai de pai em pai até achar a classe e id.

- SSOT: Single Source of Truth.

- Padrão de Dev.: Mensageria.  -> Pub - Sub (PubSub.js)

- Redux: migrando dados cruciais para uma Store.

- Reducer: pegar uma entada de dado, fazer manipulação e dar uma saida
    - publish === dispatch
    - subscribe === listener

- APENAS o setState renderiza algo na tela

- Crime deixar a store public

- Só colocar na Store/Redux quando ferir o SSOT 

- Closure: {programação funcional}: recebe um valor e os niveis abaixo teram acesso aos dados.

- Presentation / Containers